// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreLocation;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class BMLTiOSLibSearchCriteria;
@protocol BMLTiOSLibDelegate;
@class BMLTiOSLibHierarchicalServiceBodyNode;
@class BMLTiOSLibFormatNode;
@class BMLTiOSLibServerLang;
@class BMLTiOSLibMeetingNode;
@class BMLTiOSLibEditableMeetingNode;

/**
  This class represents the public interface to the BMLTiOSLib framework.
  This class needs to be instantiated with a URI to a valid Root Server (the same URI used to log in), and a BMLTiOSLibDelegate object.
  Instantiation immediately starts a communication process, and the result will be reflected in the delegate’s bmltLibInstance(_:BMLTiOSLib,serverIsValid:Bool) callback.
  If this instance fails to connect to a valid Root Server, it should be deleted, and reinstantiated for a new connection.
  Once a connection is established, the HTTP session is maintained until the instance is deinstantiated.
  The session is required to be maintained for Semantic Administration. You cannot share a session across instances of BMLTiOSLib.
  BASIC SERVER INFORMATION:
  Once you have successfully connected (established a session) to the Root Server, this instance will have some fundamental information available about that server.
  This information can be accessed by calling the following instance properties:
  <ul>
    <li>
      distanceUnits and distanceUnitsString (This is the distance unit used for the server -Km or Mi).
    </li>
    <li>
      availableMeetingValueKeys (This contains the Dictionary key strings that can access various meeting properties).
    </li>
    <li>
      emailMeetingContactsEnabled (True, if the Server is set to allow emails to be sent to meeting contacts).
    </li>
    <li>
      emailServiceBodyAdminsEnabled (True, if these emails will CC the Service Body Admin for that Service body, as well as the meeting contact -They may be the same email address).
    </li>
    <li>
      changeDepth (The number of changes saved per meeting).
    </li>
    <li>
      googleAPIKey (The API key for the Root Server -May not be useful for most other Servers).
    </li>
    <li>
      delegate (That will be the object that was passed in as delegate when the instance was created).
    </li>
    <li>
      versionAsString and versionAInt (The server version)
    </li>
    <li>
      isAdminAvailable (True, if Semantic Administration is available).
    </li>
    <li>
      defaultLocation (The Root Server’s default central location).
    </li>
    <li>
      serviceBodies (This is a “flat” Array of the Service bodies, with no hierarchy).
    </li>
    <li>
      hierarchicalServiceBodies (This maps out the Service bodies in the hierarchy they occupy on the Root Server, and this is just one node with children only -no parents or Service body).
    </li>
    <li>
      allPossibleFormats (an Array of format objects available -May not all be used by the meetings).
    </li>
    <li>
      availableServerLanguages (an Array of language objects).
    </li>
  </ul>
  MEETING SEARCHES:
  The way that you do a meeting search with this class, is to acquire the instance’s searchCriteria object, and use its various properties to set up your desired search.
  Once that is done, you call this class instance’s performMeetingSearch(_:BMLTiOSLibSearchCriteria.SearchCriteriaExtent) method, indicating whether you want just meetings,
  just the formats used by the meetings in the search results, or both.
  Once the search is complete, this class will call your delegate routines:
  bmltLibInstance(<em>:BMLTiOSLib,meetingSearchResults:[BMLTiOSLibMeetingNode]) is called with the results of the meeting search.
  bmltLibInstance(</em>:BMLTiOSLib,formatSearchResults:[BMLTiOSLibFormatNode],isAllUsedFormats:Bool) is called with the results of the format search.
  Either or both may be called, depending on what you requested when you called performMeetingSearch(_:BMLTiOSLibSearchCriteria.SearchCriteriaExtent).
  If there are no results, they will be called with empty Arrays.
  MEETING CHANGES:
  You can query for meeting changes, including deleted meetings (and you can restore deleted meetings if you are an authorized administrator).
  You do this by calling one of these methods:
  <ul>
    <li>
      getAllMeetingChanges(meetingID:Int?)
    </li>
    <li>
      getAllMeetingChanges(serviceBodyID:Int?)
    </li>
    <li>
      getAllMeetingChanges(meeting:BMLTiOSLibMeetingNode?)
    </li>
    <li>
      getAllMeetingChanges(fromDate:Date?,toDate:Date?)
    </li>
    <li>
      getAllMeetingChanges(fromDate:Date?,toDate:Date?,meetingID:Int?)
    </li>
    <li>
      getAllMeetingChanges(fromDate:Date?,toDate:Date?,serviceBodyID:Int?)
    </li>
    <li>
      getAllMeetingChanges(fromDate:Date?,toDate:Date?,serviceBodyID:Int?,meetingID:Int?)
    </li>
    <li>
      getAllMeetingChanges(fromDate:Date?,toDate:Date?,serviceBodyID:Int?,meetingID:Int?,userID:Int?)
    </li>
    <li>
      getDeletedMeetingChanges()
    </li>
    <li>
      getDeletedMeetingChanges(serviceBodyID:Int?)
    </li>
    <li>
      getDeletedMeetingChanges(fromDate:Date?,toDate:Date?,serviceBodyID:Int?)
    </li>
  </ul>
  After calling one of the above methods, your delegate is called back with the bmltLibInstance(_:BMLTiOSLib,changeListResults:[BMLTiOSLibChangeNode]) method; which will have an Array of the requested change objects.
  You can then use these objects to revert meetings, or restore deleted meetings.
  ROLLING BACK AND UNDELETING MEETINGS:
  Selecting the “saveMeetingToBeforeThisChange()” of a change or editable meeting object will use the restore deleted or rollback function of the Semantic Admin interface.
  We do allow you to take the “before” record of the meeting (found in the “json_data” JSON response, or the “beforeObject” property of the change record object), and save that.
  This allows you to add new changes (as opposed to simply accepting the whole change in a rollback, you can choose to only take certain changes).
  It also gives a better change record in the meeting history. Instead of a curt “Meeting was rolled back to a previous version.”, you now have a list of the exact fields that were changed.
  Remember that the “beforeObject” and “afterObject” properties are fully-qualified meeting objects, and, if editable, can be saved, which overwrites whatever is currently in the database (It’s exactly like saving a changed meeting record).
  You revert a meeting by calling the “revertMeetingToBeforeThisChange()” method of the change record object concerned. It’s quite simple.
  NEW MEETINGS:
  Creating new meetings is easy (as long as you are logged in as an administrator, and have sufficient rights to create a meeting).
  You create an instance of BMLTiOSLibEditableMeetingNode with an ID of 0 (the default). Then, when you call saveChanges(), it will create a new meeting.
  When you create a new meeting, or restore a deleted meeting, your delegate is called with the bmltLibInstance(_:BMLTiOSLib,newMeetingAdded:BMLTiOSLibEditableMeetingNode) method.
  The newMeetingAdded parameter will contain an object that models the newly-created meeting (including the new ID, if it was a brand-new meeting).
  SENDING MESSAGES TO MEETING CONTACTS:
  In some Root Servers, the administrator can choose to enable the ability for users of the site to send messages to designated contacts for meetings (or the Service Body Administrator responsible for the meeting).
  In these cases, the message is received as an email, but the sender does not send an email. Instead, they use a method of the BMLTiOSLibMeetingNode class, called sendMessageToMeetingContact(fromAddress:String,messageBody:String). The message is sent in the background.
  When the message has been sent, your delegate is called with the bmltLibInstance(_:BMLTiOSLib,sendMessageSuccessful:Bool) method.
  ADMINISTRATION:
  In order to perform administration on the Root Server, you need to log in with the adminLogin(loginID:String,password:String) method. The login will remain valid for the
  lifetime of this object (and its connection session), or until the adminLogout() method is called.
  Results of meeting searches will return the meeting objects as instances of BMLTiOSLibEditableMeetingNode instead of BMLTiOSLibEditableNode. is will depend on the edit
  rights that the login has for the given meeting. If you cannot edit the meeting, then the instance will be of BMLTiOSLibMeetingNode, instead of BMLTiOSLibEditableMeetingNode.
  If the instance is BMLTiOSLibEditableMeetingNode, the instance’s isEditable property will return true.
  If the instance is of the BMLTiOSLibEditableMeetingNode class, you can cast it to that class, and manipulate the public properties. Once the properties have been set, you can
  then call the saveChanges() method for that instance, and the meeting will be saved.
  Until the saveChanges() method is called, the meeting changes are not sent to the server.
  Once the meeting has been saved, your delegate will receive a call to its bmltLibInstance(_:BMLTiOSLib,adminMeetingChangeComplete:BMLTiOSLibChangedMeeting!) with an object that
  will contain whatever fields of the meeting changed, with the “before” and “after” values (always Strings).
  You can also delete a meeting, by calling the delete() method (The deletion happens immediately).
  If you delete the meeting, your delegate is called with the bmltLibInstance(_:BMLTiOSLib,deleteMeetingSuccessful:Bool) method.
  Your delegate will be called with the bmltLibInstance(_:BMLTiOSLib,deleteMeetingSuccessful:Bool) method after the deletion.
  If you call the restoreToOriginal() method, any changes that you made to the meeting object will be reverted to the state of the meeting on the server. Nothing will be sent to the server.
  You can also revert a meeting to the state it was in before a given change record for that meeting, using the revertMeetingToBeforeThisChange(_:BMLTiOSLibChangeNode) method. Nothing will be sent to the server.
  If the change was inappropriate for the meeting, the call will return false. If it was successful, the meeting’s state will be reverted to that in the change record, but will not yet be sent to the server. You still need to call saveChanges().
*/
SWIFT_CLASS("_TtC10BMLTiOSLib10BMLTiOSLib")
@interface BMLTiOSLib : NSObject
/**

  returns:
  a reference to the internal SearcCriteria object.
*/
@property (nonatomic, readonly, strong) BMLTiOSLibSearchCriteria * _Null_unspecified searchCriteria;
/**
  Accessor for our internal Distance Units.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull distanceUnitsString;
/**
  These are the available value keys for use when querying meeting data.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull availableMeetingValueKeys;
/**
  This is set to true if emails sent to the server are enabled (Goes to meeting contacts).
*/
@property (nonatomic, readonly) BOOL emailMeetingContactsEnabled;
/**
  This is set to true if emails sent to the meeting contacts also send a copy to the Service body Admin for that meeting.
*/
@property (nonatomic, readonly) BOOL emailServiceBodyAdminsEnabled;
/**
  This is number of changes stored per meeting.
*/
@property (nonatomic, readonly) NSInteger changeDepth;
/**
  This is the server Google API Key
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull googleAPIKey;
/**
  This returns the delegate object for this instance.
  The delegate can only be set at instantiation taime, so this is a
  read-only dynamic property.

  returns:
  a reference to an object that follows the BMLTiOSLibDelegate protocol.
*/
@property (nonatomic, readonly, strong) id <BMLTiOSLibDelegate> _Null_unspecified delegate;
/**
  This returns the Root Server URI used by the instance.

  returns:
  a String, with the URI.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull rootServerURI;
/**
  This is a simple Boolean test to see if the instance successfully connected.

  returns:
  a Bool, true if the instance is successfully connected.
*/
@property (nonatomic, readonly) BOOL isConnected;
/**
  This returns an error String (if any)

  returns:
  an optional String object. This will be a code that can be used to key a localized String.
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified errorString;
/**
  This returns true, if the Semantic Administration interface has an administrator logged in.

  returns:
  a Bool, true, if the administrator is logged in.
*/
@property (nonatomic, readonly) BOOL isAdminLoggedIn;
/**
  This returns the Root Server version, as an easily readable String.

  returns:
  a String, with the version, in “X.Y.Z” form, where X is the major version, Y is the minor version, and Z is the fix version
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull versionAsString;
/**
  This returns the Root Server version, as an integer. This allows easy version level checking.
  The format is XXXYYYZZZ, with XXX being the major version, YYY being the minor version, and ZZZ being the fix version.
  The result has no leading zeroes (It’s an Int), so, for example, 2.8.1 is represented as “2008001”.

  returns:
  an Int, with the version packed into integer form.
*/
@property (nonatomic, readonly) NSInteger versionAsInt;
/**
  This returns whether or not the Root Server is capable of supporting Semantic Administration.

  returns:
  a Bool, true, if the Root Server supports Semantic Administration.
*/
@property (nonatomic, readonly) BOOL isAdminAvailable;
/**
  This returns the Root Server center coordinates.

  returns:
  a CLLocationCoordinate2D object, with the coordinates (default Server coordinates).
*/
@property (nonatomic, readonly) CLLocationCoordinate2D defaultLocation;
/**
  This returns a flat (non-hierarchical) array of Service Body nodes.
  This returns every Service body on the server. Each will be in a node, with links to its parents and children (if any).

  returns:
  an Array of BMLTiOSLibHierarchicalServiceBodyNode objects, each of which represents one Service body.
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibHierarchicalServiceBodyNode *> * _Nonnull serviceBodies;
/**
  This returns a flat (non-hierarchical) array of Service Body nodes that can be observed.
  This returns every Service body on the server that the current user can observe. Each will be in a node, with links to its parents and children (if any).

  returns:
  an Array of BMLTiOSLibHierarchicalServiceBodyNode objects, each of which represents one Service body.
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibHierarchicalServiceBodyNode *> * _Nonnull serviceBodiesICanObserve;
/**
  This returns a flat (non-hierarchical) array of Service Body nodes that can be edited or observed.
  This returns every Service body on the server that the current user can observe or edit. Each will be in a node, with links to its parents and children (if any).

  returns:
  an Array of BMLTiOSLibHierarchicalServiceBodyNode objects, each of which represents one Service body.
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibHierarchicalServiceBodyNode *> * _Nonnull serviceBodiesICanEdit;
/**
  This returns a flat (non-hierarchical) array of Service Body nodes that can be observed.
  This returns every Service body on the server that the current user can observe, edit or administer. Each will be in a node, with links to its parents and children (if any).

  returns:
  an Array of BMLTiOSLibHierarchicalServiceBodyNode objects, each of which represents one Service body.
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibHierarchicalServiceBodyNode *> * _Nonnull serviceBodiesICanAdminister;
/**
  This returns a hierarchical linked list of Service Body nodes.
  This returns every Service body on the server, in a doubly linked list.

  returns:
  a BMLTiOSLibHierarchicalServiceBodyNode object that is the root of the hierarchy. Look in its “children” property.
*/
@property (nonatomic, readonly, strong) BMLTiOSLibHierarchicalServiceBodyNode * _Nonnull hierarchicalServiceBodies;
/**
  This contains all of possible meeting formats.
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibFormatNode *> * _Nonnull allPossibleFormats;
/**
  This contains the response from our get server languages call (nil, by default).
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibServerLang *> * _Nonnull availableServerLanguages;
/**
  This is the default initializer. This is required. You need to supply a valid URI and a valid delegate.
  After this is called, the BMLTiOSLib attempts to connect to the Root Server.
  IMPORTANT: YOU SHOULD NOT DO ANYTHING MORE WITH THIS BMLTiOSLib INSTANCE UNTIL THE DELEGATE CALLBACK IS INVOKED!
  The callback is the bmltLibInstance(_:BMLTiOSLib,serverIsValid:Bool) method in your delegate instance.
  You need to wait until this callback is invoked with serverIsValid set to true.
  If serverIsValid is false, then this instance of BMLTiOSLib is no longer usable, and should be discarded.
  Each instance of BMLTiOSLib has a lifetime associated with its HTTPS connection session.
  \param inRootServerURI A String, with the URI to a valid BMLT Root Server

  \param inDelegate A reference to an object that follows the BMLTiOSLibDelegate protocol.

*/
- (nonnull instancetype)initInRootServerURI:(NSString * _Nonnull)inRootServerURI inDelegate:(id <BMLTiOSLibDelegate> _Nonnull)inDelegate OBJC_DESIGNATED_INITIALIZER;
/**
  Disconnects the session, and removes all local storage.
*/
- (void)clearStorage;
/**
  Fetches a Service body node by its ID.
  \param inID The ID for the requested Service body.

*/
- (BMLTiOSLibHierarchicalServiceBodyNode * _Null_unspecified)getServiceBodyByID:(NSInteger)inID;
/**
  Fetches a format node by its shared ID.
  \param inID The ID for the requested format.

*/
- (BMLTiOSLibFormatNode * _Null_unspecified)getFormatByID:(NSInteger)inID;
/**
  Fetches a format node by its string key.
  \param inKey The key for the requested format.

*/
- (BMLTiOSLibFormatNode * _Null_unspecified)getFormatByKey:(NSString * _Nonnull)inKey;
/**
  Called to get every format actually used by meetings in the database (usually a subset of the entire format list).
*/
- (void)getAllUsedFormats;
/**
  Called to get all meeting change records for deleted meetings only from the Root Server.
*/
- (void)getDeletedMeetingChanges;
/**
  Called to get all meeting change records within a date range from the Root Server.
  \param fromDate This is a Date object that contains a date/time that represents the first meeting change instance. It can be nil for no Start Date.

  \param toDate This is a Date object that contains a date/time that represents the last meeting change instance. It can be nil for no End Date.

*/
- (void)getAllMeetingChangesFromDate:(NSDate * _Nullable)inFromDate toDate:(NSDate * _Nullable)inToDate;
/**
  Called to get meeting change records for one single meeting from the Root Server.
  \param meetingID An Int, with the ID of one meeting for which we want to get all of the last changes (It fetches all the stored changes, which are limited in scope).

*/
- (void)getAllMeetingChangesWithMeetingID:(NSInteger)inID;
/**
  Called to get meeting change records for one single meeting from the Root Server, with delivery of the changes to that meeting.
  \param meetingID An Int, with the ID of one meeting for which we want to get all of the last changes (It fetches all the stored changes, which are limited in scope).

*/
- (void)getAllMeetingChangesWithMeeting:(BMLTiOSLibMeetingNode * _Nullable)inMeetingNode;
/**
  Called to get meeting change records for one single Service body from the Root Server.
  \param serviceBodyID An Int, with the ID of one Service Body for which we want to get changes. It can be nil for all meeting changes within the given date range.

*/
- (void)getAllMeetingChangesWithServiceBodyID:(NSInteger)inServiceBodyID;
/**
  Called to log into a server that has semantic admin turned on.
  \param inLoginID This is a string, with the login ID.

  \param inPassword This is a string, with the password.


  returns:
  a Bool, which is true, if the connection is to a valid server with semantic admin on.
*/
- (BOOL)adminLoginWithLoginID:(NSString * _Nonnull)inLoginID password:(NSString * _Nonnull)inPassword;
/**
  Called to log out of a server that has semantic admin turned on.

  returns:
  a Bool, which is true, if the connection is to a valid server with semantic admin on.
*/
- (BOOL)adminLogout;
/**
  This is called to set a meeting change.
  \param inMeetingObject an editable meeting object.

*/
- (void)saveMeetingChanges:(BMLTiOSLibEditableMeetingNode * _Nonnull)inMeetingObject;
/**
  This is called to set a meeting change.
  \param inMeetingObject an editable meeting object.


  returns:
  true, if the operation was dispatched successfully.
*/
- (BOOL)rollbackMeeting:(NSInteger)inMeetingID toBeforeChange:(NSInteger)inChangeID;
/**
  Called to delete a meeting.
  We have to assume the logged-in admin has rights. If they don’t, it will be stopped at the server.
  \param inMeetingID An Int, with the ID of the meeting to be deleted.

*/
- (void)deleteMeeting:(NSInteger)inMeetingID;
/**
  Called to restore a deleted meeting.
  This instructs the Root Server to find the last deletion record for the meeting,
  and restore it to the state it was in just prior to deletion.
  However, it is more ideal to find the latest deletion record, and restore its “before” instance (See discussion above).
  \param inMeetingID An Int, with the ID of the meeting to be restored.


  returns:
  true, if the operation was dispatched successfully.
*/
- (BOOL)restoreDeletedMeeting:(NSInteger)inMeetingID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is a special class that represents change objects.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib20BMLTiOSLibChangeNode")
@interface BMLTiOSLibChangeNode : NSObject
/**
  If there was a “before this change” meeting object, it is provided here.
*/
@property (nonatomic, strong) BMLTiOSLibMeetingNode * _Null_unspecified beforeObject;
/**
  If there was an “after this change” meeting object, it is provided here.
*/
@property (nonatomic, strong) BMLTiOSLibMeetingNode * _Null_unspecified afterObject;
/**

  returns:
  The date the change was made.
*/
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified changeDate;
/**

  returns:
  The name of the administrator that made the change.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull changeMaker;
/**

  returns:
  The ID of the change.
*/
@property (nonatomic, readonly) NSInteger id;
/**

  returns:
  The Service body to which the changed meeting belongs.
*/
@property (nonatomic, readonly, strong) BMLTiOSLibHierarchicalServiceBodyNode * _Null_unspecified serviceBody;
/**

  returns:
  True, if the meeting currently exists.
*/
@property (nonatomic, readonly) BOOL meetingCurrentlyExists;
/**

  returns:
  The listed change details.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull details;
/**

  returns:
  The listed change meeting ID.
*/
@property (nonatomic, readonly) NSInteger meeting_id;
/**

  returns:
  True, if the meeting was created by this change.
*/
@property (nonatomic, readonly) BOOL meetingWasCreated;
/**

  returns:
  True, if the meeting was deleted by this change.
*/
@property (nonatomic, readonly) BOOL meetingWasDeleted;
/**
  Each Dictionary entry is described by the field key. The content is a 2-element String Array, with 0 being the “before” value and 1 being the “after” value

  returns:
  a Dictionary of changes made, with “before” and “after” values for each changed field.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Null_unspecified meetingWasChanged;
/**
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Reverts a meeting to the “before” state of this change, but does not save the changes.
  The “before” meeting must also be editable, the user needs to be currently logged in
  with edit privileges on the meeting.

  returns:
  True, if the reversion was allowed.
*/
- (BOOL)revertMeetingToBeforeThisChange;
/**
  Reverts a meeting to the “before” state of this change, and saves it on the server.
  If this is a deleted meeting, the meeting will be restored, which the server does by finding the last delete change for that meeting, and restores it.
  It is possible that the restored meeting may be different from the one before this change,
  but doing it this way makes sure the last meeting state is preserved.
  The “before” meeting must also be editable, the user needs to be currently logged in
  with edit privileges on the meeting.

  returns:
  True, if the reversion was allowed.
*/
- (BOOL)saveMeetingToBeforeThisChange;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is a special class that represents objects for meeting changes.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib24BMLTiOSLibChangedMeeting")
@interface BMLTiOSLibChangedMeeting : NSObject
/**

  returns:
  The changed meeting’s BMLT ID.
*/
@property (nonatomic, readonly) NSInteger meetingID;
/**

  returns:
  All the various field changes associated with this meeting change.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull meetingChanges;
/**

  returns:
  A textual description of the change.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This protocol is required for any class that wants to control an instance of BMLTiOSLib.
  Only 2 of these functions are required:
  func bmltLibInstance(_ inLibInstance: BMLTiOSLib, serverIsValid: Bool)
  func bmltLibInstance(_ inLibInstance: BMLTiOSLib, errorOccurred error: Error)
  All the rest are optional.
  These are all called in the main thread.
*/
SWIFT_PROTOCOL("_TtP10BMLTiOSLib18BMLTiOSLibDelegate_")
@protocol BMLTiOSLibDelegate
/**
  Indicates whether or not the server pointed to via the URI is a valid server (the connection was successful).
  This will be called after the Root Server connection sequence has completed.
  This connection sequence consists of:
  <ul>
    <li>
      Determining the fundamental validity of the URI (Connects to a Root Server). The Root Server MUST run SSL (HTTPS).
    </li>
    <li>
      Determining the fundamental validity of the Root Server (Correct version, supports the proper set of default keys).
    </li>
    <li>
      Loading the full set of available formats (They may not all be in actual use by meetings).
    </li>
    <li>
      Loading the entire set of Service bodies.
    </li>
    <li>
      Loading the entire set of languages available on the Root Server.
    </li>
  </ul>
  By the time this method has been called with serverIsValid as true, the BMLTiOSLib has the following properties set and valid:
  <ul>
    <li>
      searchCriteria (This will be empty and clear, but available for access).
    </li>
    <li>
      distanceUnits and distanceUnitsString
    </li>
    <li>
      availableMeetingValueKeys (This contains the Dictionary key strings that can access various meeting properties).
    </li>
    <li>
      emailMeetingContactsEnabled (True, if the Server is set to allow emails to be sent to meeting contacts).
    </li>
    <li>
      emailServiceBodyAdminsEnabled (True, if these emails will CC the Service Body Admin for that Service body, as well as the meeting contact -They may be the same email address).
    </li>
    <li>
      changeDepth (The number of changes saved per meeting).
    </li>
    <li>
      googleAPIKey (The API key for the Root Server -May not be useful for most other Servers).
    </li>
    <li>
      delegate (That will be the object that was passed in as delegate when the instance was created).
    </li>
    <li>
      rootServerURI
    </li>
    <li>
      versionAsString and versionAInt
    </li>
    <li>
      isAdminAvailable (True, if Semantic Administration is available).
    </li>
    <li>
      defaultLocation (The Root Server’s default central location).
    </li>
    <li>
      serviceBodies (This is a “flat” Array of the Service bodies, with no hierarchy).
    </li>
    <li>
      hierarchicalServiceBodies (This maps out the Service bodies in the hierarchy they occupy on the Root Server, and this is just one node with children only -no parents or Service body).
    </li>
    <li>
      allPossibleFormats (an Array of format objects available -May not all be used by the meetings).
    </li>
    <li>
      availableServerLanguages (an Array of language objects).
    </li>
  </ul>
  You can’t call any of the BMLTiOSLib communication instance methods until this callback has been invoked with a serverIsValid value of true.
  \param inLibInstance the BMLTiOSLib instance.

  \param inServerIsValid A Bool, true, if the server was successfully connected. If false, you must reinstantiate BMLTiOSLib. You can’t re-use the same instance.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance serverIsValid:(BOOL)serverIsValid;
/**
  Called if there is an error.
  The error String will be a key for localization, and will be pretty much worthless on its own.
  \param inLibInstance the BMLTiOSLib instance.

  \param error The error that occurred.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance errorOccurred:(NSError * _Nonnull)error;
@optional
/**
  Returns the result of a meeting search.
  \param inLibInstance the BMLTiOSLib instance.

  \param meetingSearchResults An array of meeting objects, representing the results of a search.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance meetingSearchResults:(NSArray<BMLTiOSLibMeetingNode *> * _Nonnull)meetingSearchResults;
/**
  Returns the result of a format search.
  \param inLibInstance the BMLTiOSLib instance.

  \param formatSearchResults An array of format objects.

  \param isAllUsedFormats This is true, if this is the “all used formats” call, where we generate objects that reflect the formats actually used by any meetings in the entire database (as opposed to simply “available, but not used”).

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance formatSearchResults:(NSArray<BMLTiOSLibFormatNode *> * _Nonnull)formatSearchResults isAllUsedFormats:(BOOL)isAllUsedFormats;
/**
  Returns the result of a change list request.
  \param inLibInstance the BMLTiOSLib instance.

  \param changeListResults An array of change objects.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance changeListResults:(NSArray<BMLTiOSLibChangeNode *> * _Nonnull)changeListResults;
/**
  Indicates whether or not a Semantic Admin log in or out occurred.
  This actually is called when the login state changes (or doesn’t change when change is expected).
  This is called in response to a login or logout. It is always called, even if
  the login state did not change.
  \param inLibInstance the BMLTiOSLib instance.

  \param loginChangedTo A Bool, true, if the session is currently connected.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance loginChangedTo:(BOOL)loginChangedTo;
/**
  Called when a new meeting has been added, or a deleted meeting has been restored.
  \param inLibInstance the BMLTiOSLib instance.

  \param newMeetingAdded Meeting object.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance newMeetingAdded:(BMLTiOSLibEditableMeetingNode * _Nonnull)newMeetingAdded;
/**
  Called when a new meeting has been rolled back to a previous version.
  \param inLibInstance the BMLTiOSLib instance.

  \param meetingRolledback Meeting object.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance meetingRolledback:(BMLTiOSLibEditableMeetingNode * _Nonnull)meetingRolledback;
/**
  Called when a meeting has been edited.
  \param inLibInstance the BMLTiOSLib instance.

  \param adminMeetingChangeComplete If successful, this will be the changes made to the meeting. nil, if failed.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance adminMeetingChangeComplete:(BMLTiOSLibChangedMeeting * _Null_unspecified)adminMeetingChangeComplete;
/**
  Called when a new meeting has been deleted.
  \param inLibInstance the BMLTiOSLib instance.

  \param deleteMeetingSuccessful true, if the operation was successful.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance deleteMeetingSuccessful:(BOOL)deleteMeetingSuccessful;
/**
  Called when a message has been sent to a meeting contact.
  \param inLibInstance the BMLTiOSLib instance.

  \param sendMessageSuccessful true, if the operation was successful.

*/
- (void)bmltLibInstance:(BMLTiOSLib * _Nonnull)inLibInstance sendMessageSuccessful:(BOOL)sendMessageSuccessful;
@end

@class NSDateComponents;

/**
  This is a special “micro class” for accessing the meetings for a Server.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib21BMLTiOSLibMeetingNode")
@interface BMLTiOSLibMeetingNode : NSObject
- (NSString * _Null_unspecified)objectForKeyedSubscript:(NSString * _Nonnull)inStringKey;
/**
  This will contain any changes that are associated with this meeting.
*/
@property (nonatomic, copy) NSArray<BMLTiOSLibChangeNode *> * _Null_unspecified changes;
/**
  This class is not editable.
*/
@property (nonatomic, readonly) BOOL isEditable;
/**
  Returns a sorted list of the value array keys. It sorts the “default” ones first.

  returns:
  all of the available keys in our dictionary.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**

  returns:
  Our internal editable instance instead of the read-only one for the superclass.
*/
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull rawMeeting;
/**

  returns:
  An Int, with the meeting BMLT ID.
*/
@property (nonatomic, readonly) NSInteger id;
/**

  returns:
  An Int, with the meeting’s Service body BMLT ID.
*/
@property (nonatomic, readonly) NSInteger serviceBodyId;
/**

  returns:
  The meeting’s Service body object. nil, if no Service body (should never happen).
*/
@property (nonatomic, readonly, strong) BMLTiOSLibHierarchicalServiceBodyNode * _Null_unspecified serviceBody;
/**

  returns:
  an array of format objects.
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibFormatNode *> * _Nonnull formats;
/**

  returns:
  a CSV string of format codes, sorted alphabetically.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull formatsAsCSVList;
/**

  returns:
  A Bool. True, if the meeting is published.
*/
@property (nonatomic, readonly) BOOL published;
/**

  returns:
  A String, with the meeting name.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**

  returns:
  An Int, with the weekday (1 = Sunday, 7 = Saturday).
*/
@property (nonatomic, readonly) NSInteger weekdayIndex;
/**

  returns:
  A String, with the start time in military format (“HH:MM”).
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull timeString;
/**

  returns:
  A String, with the duration (“HH:MM”).
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull durationString;
/**

  returns:
  An Integer, with the duration in minutes.
*/
@property (nonatomic, readonly) NSInteger durationInMinutes;
/**

  returns:
  an optional DateComponents object, with the weekday and time of the meeting.
*/
@property (nonatomic, readonly, copy) NSDateComponents * _Null_unspecified startTimeAndDay;
/**

  returns:
  an optional Date object, with the next occurrence of the meeting (from now).
*/
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified nextStartDate;
/**

  returns:
  A String, with the location building name.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationName;
/**

  returns:
  A String, with the location street address.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationStreetAddress;
/**

  returns:
  A String, with the location borough.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationBorough;
/**

  returns:
  A String, with the location town.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationTown;
/**

  returns:
  A String, with the location county.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationCounty;
/**

  returns:
  A String, with the location state/province.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationState;
/**

  returns:
  A String, with the location zip code/postal code.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationZip;
/**

  returns:
  A String, with the location nation.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationNation;
/**

  returns:
  A String, with additional location info.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull locationInfo;
/**

  returns:
  A String, with the comments.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull comments;
/**
  Read-only property that returns the distance (in Miles) from the search center.

  returns:
  the distance from the search center (may not be applicable, in which case it will be 0).
*/
@property (nonatomic, readonly) double distanceInMiles;
/**
  Read-only property that returns the distance (in Kilometers) from the search center.

  returns:
  the distance from the search center (may not be applicable, in which case it will be 0).
*/
@property (nonatomic, readonly) double distanceInKm;
/**
  This parses the meeting data, and creates a fairly basic, straightforward address.
  The address type is specified by the “BMLTiOSLibAddressParser” info.plist property.
  This is a read-only property.

  returns:
  A String, with a basic address.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull basicAddress;
/**
  This is always false for this class.
*/
@property (nonatomic, readonly) BOOL isDirty;
/**
  This is a read-only property that overrides the NSObject description.
  It returns a string that aggregates the meeting info into a simple
  US-style meeting description.
  For many uses, this may give enough information to display the meeting.

  returns:
  A String, with the essential Meeting Info.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Default initializer. Initiatlize with raw meeting data (a simple Dictionary).
  \param inRawMeeting This is a Dictionary that describes the meeting. If empty, then a default meeting will be created.

  \param inHandler This is the BMLTiOSLib object that “owns” this meeting

*/
- (nonnull instancetype)init:(NSDictionary<NSString *, NSString *> * _Nonnull)inRawMeeting inHandler:(BMLTiOSLib * _Nonnull)inHandler OBJC_DESIGNATED_INITIALIZER;
/**
  Requests all changes for this meeting from the BMLTiOSLib handler.
*/
- (void)getChanges;
/**
  If sending messages to meeting contacts is enabled, this function will send a basic email to the contact for this email.
  This will result in the delegate callback bmltLibInstance(_:BMLTiOSLib,sendMessageSuccessful: Bool) being invoked.
  \param fromAddress The email to be used as the “from” address. This is required, and should be valid.

  \param messageBody A String containing the body of the message to be sent.

*/
- (void)sendMessageToMeetingContactFromAddress:(NSString * _Nonnull)fromAddress messageBody:(NSString * _Nonnull)messageBody;
/**
  Returns true, if the meeting start time is after the given time.
  \param inTime The test start time, as time components (hours, minutes, seconds). The day is ignored.


  returns:
  true, if the meeting starts on or after the given test time.
*/
- (BOOL)meetingStartsOnOrAfterThisTime:(NSDateComponents * _Nonnull)inTime;
/**
  Returns true, if the meeting start time is before the given time.
  \param inTime The test start time, as time components (hours, minutes, seconds). The day is ignored.


  returns:
  true, if the meeting starts on or before the given test time.
*/
- (BOOL)meetingStartsOnOrBeforeThisTime:(NSDateComponents * _Nonnull)inTime;
/**
  Returns true, if the meeting end time is before the given time.
  \param inTime The test end time, as time components (hours, minutes, seconds). The day is ignored.


  returns:
  true, if the meeting ends at or before the given test time.
*/
- (BOOL)meetingEndsAtOrBeforeThisTime:(NSDateComponents * _Nonnull)inTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is a special “micro class” for editing the meetings for a Server.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib29BMLTiOSLibEditableMeetingNode")
@interface BMLTiOSLibEditableMeetingNode : BMLTiOSLibMeetingNode
/**
  This returns a flat (non-hierarchical) array of Service Body nodes that this meeting can be assinged.
  This returns every Service body on the server that the current user can observe or edit.
  Each will be in a node, with links to its parents and children (if any).

  returns:
  an Array of BMLTiOSLibHierarchicalServiceBodyNode objects, each of which represents one Service body.
*/
@property (nonatomic, readonly, copy) NSArray<BMLTiOSLibHierarchicalServiceBodyNode *> * _Nonnull serviceBodiesICanBelongTo;
/**
  This class is editable.
*/
@property (nonatomic, readonly) BOOL isEditable;
/**
  This allows us to set a new collection of meeting formats via an array of format objects.

  returns:
  an array of format objects.
*/
@property (nonatomic, copy) NSArray<BMLTiOSLibFormatNode *> * _Nonnull formats;
/**
  This allows us to set a new collection of meeting formats via a CSV string of their codes.

  returns:
  a CSV string of format codes, sorted alphabetically.
*/
@property (nonatomic, copy) NSString * _Nonnull formatsAsCSVList;
/**
  This sets the meeting’s “published” status.

  returns:
  A Bool. True, if the meeting is published.
*/
@property (nonatomic) BOOL published;
/**

  returns:
  An Int, with the meeting’s Service body BMLT ID.
*/
@property (nonatomic) NSInteger serviceBodyId;
/**

  returns:
  The meeting’s Service body object. nil, if no Service body (should never happen).
*/
@property (nonatomic, strong) BMLTiOSLibHierarchicalServiceBodyNode * _Null_unspecified serviceBody;
/**

  returns:
  A String, with the meeting name.
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**

  returns:
  A String, with the location building name.
*/
@property (nonatomic, copy) NSString * _Nonnull locationName;
/**

  returns:
  A String, with the location street address.
*/
@property (nonatomic, copy) NSString * _Nonnull locationStreetAddress;
/**

  returns:
  A String, with the location borough.
*/
@property (nonatomic, copy) NSString * _Nonnull locationBorough;
/**

  returns:
  A String, with the location town.
*/
@property (nonatomic, copy) NSString * _Nonnull locationTown;
/**

  returns:
  A String, with the location county.
*/
@property (nonatomic, copy) NSString * _Nonnull locationCounty;
/**

  returns:
  A String, with the location state/province.
*/
@property (nonatomic, copy) NSString * _Nonnull locationState;
/**

  returns:
  A String, with the location zip code/postal code.
*/
@property (nonatomic, copy) NSString * _Nonnull locationZip;
/**

  returns:
  A String, with the location nation.
*/
@property (nonatomic, copy) NSString * _Nonnull locationNation;
/**

  returns:
  A String, with additional location info.
*/
@property (nonatomic, copy) NSString * _Nonnull locationInfo;
/**

  returns:
  A String, with the comments.
*/
@property (nonatomic, copy) NSString * _Nonnull comments;
/**

  returns:
  An Int, with the weekday (1 = Sunday, 7 = Saturday).
*/
@property (nonatomic) NSInteger weekdayIndex;
/**
  This parses a military time string (either “HH:MM” or “HHMM”), and creates a new
  start time from the string.

  returns:
  A String, with the start time in military format (“HH:MM”).
*/
@property (nonatomic, copy) NSString * _Nonnull timeString;
/**

  returns:
  A String, with the duration (“HH:MM”).
*/
@property (nonatomic, copy) NSString * _Nonnull durationString;
/**
  Sets the new duration from an integer, representing the number of minutes.

  returns:
  An Integer, with the duration in minutes.
*/
@property (nonatomic) NSInteger durationInMinutes;
/**
  This extracts the weekday and the time of day from the components, and uses these as new values for the meeting.

  returns:
  an optional DateComponents object, with the weekday and time of the meeting.
*/
@property (nonatomic, copy) NSDateComponents * _Null_unspecified startTimeAndDay;
/**
  This sets a new time and weekday by parsing the Date object provided.
  It extracts the weekday and the time of day, and uses these as new values for the meeting.

  returns:
  an optional Date object, with the next occurrence of the meeting (from now).
*/
@property (nonatomic, copy) NSDate * _Null_unspecified nextStartDate;
/**

  returns:
  true, if the meeting data has changed from its original instance.
*/
@property (nonatomic, readonly) BOOL isDirty;
/**
  Default initializer. Initiatlize with raw meeting data (a simple Dictionary).
  \param inRawMeeting This is a Dictionary that describes the meeting.

  \param inHandler This is the BMLTiOSLib object that “owns” this meeting

*/
- (nonnull instancetype)init:(NSDictionary<NSString *, NSString *> * _Nonnull)inRawMeeting inHandler:(BMLTiOSLib * _Nonnull)inHandler OBJC_DESIGNATED_INITIALIZER;
/**
  Removes all changes made to the meeting.
*/
- (void)restoreToOriginal;
/**
  Reverts a meeting to the “before” state of a given change, but does not save it to the server.
  The “before” meeting must also be editable, the user needs to be currently logged in
  with edit privileges on the meeting.

  returns:
  True, if the reversion was allowed.
*/
- (BOOL)revertMeetingToBeforeThisChange:(BMLTiOSLibChangeNode * _Nonnull)inChangeObject;
/**
  Reverts a meeting to the “before” state of a given change, and saves it to the server.
  The “before” meeting must also be editable, the user needs to be currently logged in
  with edit privileges on the meeting.

  returns:
  True, if the reversion was allowed.
*/
- (BOOL)saveMeetingToBeforeThisChange:(BMLTiOSLibChangeNode * _Nonnull)inChangeObject;
/**
  Test whether or not a given field has undergone a change.
  \param inKey The meeting field key to test.


  returns:
  True, if the given field is different from the original one.
*/
- (BOOL)valueChanged:(NSString * _Nonnull)inKey;
/**
  Deletes this meeting.
*/
- (void)delete;
/**
  Saves changes made to the meeting.
*/
- (void)saveChanges;
@end


/**
  This is a special “micro class” for accessing the formats for a Server.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib20BMLTiOSLibFormatNode")
@interface BMLTiOSLibFormatNode : NSObject
/**
  This is whatever data the user wants to attach to the node.
*/
@property (nonatomic, strong) id _Nullable extraData;
/**

  returns:
  all of the available keys in our dictionary.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**

  returns:
  An optional String, with the format key.
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified key;
/**

  returns:
  An optional String, with the format name.
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified name;
/**

  returns:
  An optional String, with the format description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**

  returns:
  An optional String, with the format language indicator.
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified lang;
/**

  returns:
  An optional String, with the format World ID (which may not be available, returning an empty string).
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified worldID;
/**
  Default initializer. Initiatlize with raw format data (a simple Dictionary).
  \param inRawFormat This is a Dictionary that describes the format.

*/
- (nonnull instancetype)init:(NSDictionary<NSString *, NSString *> * _Nonnull)inRawFormat inExtraData:(id _Nullable)inExtraData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is a special “micro class” for aggregating a hierarchical Service body map.
  We create the map when we connect to the Root Server, and the map is a doubly-linked list,
  with each node containing the basic dictionary for a Service body, and references to parents
  and contained (“children”) nodes.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib37BMLTiOSLibHierarchicalServiceBodyNode")
@interface BMLTiOSLibHierarchicalServiceBodyNode : NSObject
/**
  The parent node for this object. Nil if top-level.
*/
@property (nonatomic, strong) BMLTiOSLibHierarchicalServiceBodyNode * _Null_unspecified parent;
/**
  The Service body information for this node.
*/
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Null_unspecified serviceBody;
/**
  An array of “child” nodes. May be empty, if we are a “leaf.”
*/
@property (nonatomic, copy) NSArray<BMLTiOSLibHierarchicalServiceBodyNode *> * _Nonnull children;
/**
  This is whatever data the user wants to attach to the node.
*/
@property (nonatomic, strong) id _Nullable extraData;
/**

  returns:
  all of the available keys in our dictionary.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**

  returns:
  the Service body ID as an Int. If there is no ID, it returns 0 (Should never happen).
*/
@property (nonatomic, readonly) NSInteger id;
/**

  returns:
  the Service body name as a String. If there is no name, it returns blank.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**

  returns:
  the Service body description as a String. If there is no description, it returns the name.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**

  returns:
  If we are logged in as an admin, and have administrator rights for this Service body, we get a true.
*/
@property (nonatomic, readonly) BOOL iCanAdminister;
/**

  returns:
  If we are logged in as an admin, and have edit rights for this Service body, we get a true.
*/
@property (nonatomic, readonly) BOOL iCanEdit;
/**

  returns:
  If we are logged in as an admin, and have observer rights for this Service body, we get a true.
*/
@property (nonatomic, readonly) BOOL iCanObserve;
/**

  returns:
  true, if we have a parent.
*/
@property (nonatomic, readonly) BOOL hasParent;
/**

  returns:
  true, if we have children.
*/
@property (nonatomic, readonly) BOOL hasChildren;
/**
  Copy initializer.
  \param inObject This references an object we will adopt.

*/
- (nonnull instancetype)init:(BMLTiOSLibHierarchicalServiceBodyNode * _Nonnull)inObject OBJC_DESIGNATED_INITIALIZER;
/**
  Default initializer. We must have at least the server comm.
  \param inServerComm This is a reference to the BMLTiOSLib instance that “owns” this.

*/
- (nonnull instancetype)initInServerComm:(BMLTiOSLib * _Nonnull)inServerComm OBJC_DESIGNATED_INITIALIZER;
/**
  Basic initializer with full data.
  \param inServerComm This is a reference to the BMLTiOSLib instance that “owns” this.

  \param parent any parent node in a hierarchy.

  \param serviceBody a Dictionary<String,String>, containing the Service body information.

  \param chidren This is an Array of BMLTiOSLibHierarchicalServiceBodyNode objects, which are the children for this node.

*/
- (nonnull instancetype)initInServerComm:(BMLTiOSLib * _Nonnull)inServerComm parent:(BMLTiOSLibHierarchicalServiceBodyNode * _Null_unspecified)parent serviceBody:(NSDictionary<NSString *, NSString *> * _Null_unspecified)serviceBody children:(NSArray<BMLTiOSLibHierarchicalServiceBodyNode *> * _Nonnull)children OBJC_DESIGNATED_INITIALIZER;
/**
  This checks a given Service Body node, and sees if it is in the hierarchy.
  \param inSBNode this is the node to check.


  returns:
  true, if the node is somewhere in our woodpile.
*/
- (BOOL)isInHierarchy:(BMLTiOSLibHierarchicalServiceBodyNode * _Nonnull)inSBNode;
/**
  This checks a given Service Body node by its ID, and sees if it is in the hierarchy.
  \param inID the integer ID of the Service body to check.


  returns:
  true, if the ID represents a Service body somewhere in our woodpile.
*/
- (BOOL)isSBIDInHierarchy:(NSInteger)inID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/**
  This is a special “sub-micro class” for iterating through the fields of this meeting.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib44BMLTiOSLibMeetingNodeSimpleDictionaryElement")
@interface BMLTiOSLibMeetingNodeSimpleDictionaryElement : NSObject
/**
  The Dictionary key
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/**
  The element value
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/**
  The meeting node that “owns” this element.
*/
@property (nonatomic, readonly, strong) BMLTiOSLibMeetingNode * _Nonnull handler;
/**
  Accessor for the handler’s BMLTiOSLib library (The Handler’s handler).
*/
@property (nonatomic, readonly, strong) BMLTiOSLib * _Nonnull library;
/**
  Default Initializer
  \param key The key for this node.

  \param value The value to assign for the key

  \param handler The BMLTiOSLibMeetingNode object that “owns” this data object.

*/
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value handler:(BMLTiOSLibMeetingNode * _Nonnull)handler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is a special class that is used to gather and process meeting search criteria.
  The way it works, is that it gathers a search state, then creates a URI parameter list to be used by the main communication module.
  It does not do any communication, in itself.
  It has been designed so that the search criteria are expressed as properties, instead of functions.
  In order to execute searches, the user should access the instance of this class, and use it to set up search criteria. Upon completion of
  this, they should call the main instance’s performMeetingSearch(_:) method. The main instance will ask the Search Criteria instance to
  create a URI parameter list that will describe the search.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib24BMLTiOSLibSearchCriteria")
@interface BMLTiOSLibSearchCriteria : NSObject
/**
  Accessor for our internal search radius value.
*/
@property (nonatomic) float searchRadius;
/**
  Accessor for our internal Search String.
*/
@property (nonatomic, copy) NSString * _Nonnull searchString;
/**
  Accessor for our internal Search String Is a Location selector.
  NOTE: If this is specified, and a string is provided in searchString, then searchLocation is ignored.
*/
@property (nonatomic) BOOL searchStringIsALocation;
/**
  Accessor for our internal Search String is Exact selector
*/
@property (nonatomic) BOOL stringSearchIsExact;
/**
  Accessor for our internal Search String Uses all Substrings selector
*/
@property (nonatomic) BOOL stringSearchUsesAllStrings;
/**
  Accessor for our internal meetings should begin before (or at) start time flag.

  returns:
  a Bool, true if the meeting should start before or on the start time, or false, if the meeting is to start at or after the start time.
*/
@property (nonatomic) BOOL meetingsStartBeforeStartTime;
/**
  Accessor for our internal meetings should be shorter than the duration flag.

  returns:
  a Bool, true if the meeting should be shorter than (or equal to) the duration time, or false, if the meeting is equal to, or longer than, the duration.
*/
@property (nonatomic) BOOL meetingsAreShorterThanDuration;
/**
  An easy way to test or set a minimum starting time for meetings.

  returns:
  an optional NSDateComponents. If not nil, will contain the minimum start time for meetings.
*/
@property (nonatomic, strong) NSDateComponents * _Nullable meetingsShouldStartAtOrAfter;
/**
  An easy way to test or set a maximum starting time for meetings.

  returns:
  an optional NSDateComponents. If not nil, will contain the maximum start time for meetings.
*/
@property (nonatomic, strong) NSDateComponents * _Nullable meetingsShouldStartBeforeOrAt;
/**
  An easy way to test or set a minimum duration time for meetings.

  returns:
  an optional NSDateComponents. If not nil, will contain the minimum duration for meetings.
*/
@property (nonatomic, strong) NSDateComponents * _Nullable meetingsAreAtLeast;
/**
  An easy way to test or set a maximum duration time for meetings.

  returns:
  an optional NSDateComponents. If not nil, will contain the maximum duration for meetings.
*/
@property (nonatomic, strong) NSDateComponents * _Nullable meetingsAreNoLongerThan;
/**
  An easy way to test or set a maximum end time for meetings.

  returns:
  an optional NSDateComponents. If not nil, will contain the maximum end time for meetings.
*/
@property (nonatomic, strong) NSDateComponents * _Nullable meetingsEndOnOrBefore;
/**

  returns:
  true, if there is a search criteria set.
*/
@property (nonatomic, readonly) BOOL isDirty;
/**
  Default initializer. We must have at least the server comm.
  \param inServerComm This is a reference to the BMLTiOSLib instance that “owns” this.

*/
- (nonnull instancetype)init:(BMLTiOSLib * _Nonnull)inServerComm OBJC_DESIGNATED_INITIALIZER;
/**
  Make sure we completely deallocate our selectable lists.
*/
- (void)clearStorage;
/**
  This resets all search criteria to default.
*/
- (void)clearAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This class will present a functional interface to the server languages.
*/
SWIFT_CLASS("_TtC10BMLTiOSLib20BMLTiOSLibServerLang")
@interface BMLTiOSLibServerLang : NSObject
- (NSString * _Null_unspecified)objectForKeyedSubscript:(NSString * _Nonnull)inString;
/**

  returns:
  the language key.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull langKey;
/**

  returns:
  the language name.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull langName;
/**
  :returns true, if this is the default Server language.
*/
@property (nonatomic, readonly) BOOL isDefault;
/**
  Simple direct initializer.
  \param inLang This is a Dictionary that contains the info returned from the server.

*/
- (nonnull instancetype)init:(NSDictionary<NSString *, NSString *> * _Nonnull)inLang OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
